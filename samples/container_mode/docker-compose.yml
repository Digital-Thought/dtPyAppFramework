# Docker Compose configuration for Container Mode Sample
# This shows how to run the sample with supporting services

version: '3.8'

services:
  # Main application service
  app:
    build: 
      context: ../..  # Build from project root
      dockerfile: samples/container_mode/Dockerfile
    container_name: dtpyapp-container-sample
    environment:
      - CONTAINER_MODE=true
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=sampledb
      - REDIS_HOST=cache
      - API_KEY=demo-api-key-123
    volumes:
      # Persist data and logs
      - ./data:/app/data
      - ./logs:/app/logs
      # Mount custom config if needed
      - ./config:/app/config:ro
    depends_on:
      - database
      - cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "sample/container_app.py", "--task", "config", "--container"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network

  # PostgreSQL database service
  database:
    image: postgres:15-alpine
    container_name: dtpyapp-postgres
    environment:
      - POSTGRES_DB=sampledb
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=apppass
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d sampledb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Redis cache service
  cache:
    image: redis:7-alpine
    container_name: dtpyapp-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - app_network

  # Optional: Web dashboard to monitor the application
  dashboard:
    image: nginx:alpine
    container_name: dtpyapp-dashboard
    volumes:
      - app_logs:/usr/share/nginx/html/logs:ro
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - app
    networks:
      - app_network

# Named volumes for data persistence
volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network for service communication
networks:
  app_network:
    driver: bridge